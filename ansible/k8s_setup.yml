---
- hosts: localhost
  vars_files:
    - vars.yml

  tasks:
    - name: Configure Kubernetes to use ACR
      command: >
        az aks update -n casopractico2-lgc2--aks
        -g casopractico2-lgc2--rg --attach-acr "{{ acr_server_resource }}"

    - name: Create Kubernetes secret for ACR
      command: >
        kubectl create secret docker-registry acr-secret
        --docker-server={{ acr_server }}
        --docker-username="{{ acr_username }}"
        --docker-password="{{ acr_password }}"

    - name: Deploy persistent storage application
      copy:
        dest: /tmp/k8s_pv.yaml
        content: |
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: pv-volume
          spec:
            capacity:
              storage: 1Gi
            accessModes:
              - ReadWriteOnce
            hostPath:
              path: "/mnt/data"
      register: pv_file

    - name: Apply persistent volume configuration
      command: kubectl apply -f /tmp/k8s_pv.yaml

    - name: Create persistent volume claim
      copy:
        dest: /tmp/k8s_pvc.yaml
        content: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: pvc-volume
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
      register: pvc_file

    - name: Apply persistent volume claim
      command: kubectl apply -f /tmp/k8s_pvc.yaml

    - name: Deploy Jenkins on Kubernetes
      copy:
        dest: /tmp/k8s_jenkins_deployment.yaml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: jenkins
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: jenkins
            template:
              metadata:
                labels:
                  app: jenkins
              spec:
                containers:
                - name: jenkins
                  image: "{{ container_image }}"  # Aseg√∫rate de que esta imagen sea la de Jenkins
                  ports:
                  - containerPort: 8080
                  - containerPort: 50000
                  env:
                  - name: JENKINS_USER
                    value: "{{ acr_username }}"
                  - name: JENKINS_PASSWORD
                    value: "{{ acr_password }}"
                  volumeMounts:
                  - mountPath: "/var/jenkins_home"
                    name: jenkins-storage
                volumes:
                - name: jenkins-storage
                  persistentVolumeClaim:
                    claimName: pvc-volume
      register: deploy_file

    - name: Apply Jenkins deployment configuration
      command: kubectl apply -f /tmp/k8s_jenkins_deployment.yaml

    - name: Expose Jenkins via service
      copy:
        dest: /tmp/k8s_jenkins_service.yaml
        content: |
          apiVersion: v1
          kind: Service
          metadata:
            name: jenkins-service
          spec:
            selector:
              app: jenkins
            ports:
              - protocol: TCP
                port: 8080
                targetPort: 8080
              - protocol: TCP
                port: 50000
                targetPort: 50000
            type: LoadBalancer
      register: svc_file

    - name: Apply Jenkins service configuration
      command: kubectl apply -f /tmp/k8s_jenkins_service.yaml

