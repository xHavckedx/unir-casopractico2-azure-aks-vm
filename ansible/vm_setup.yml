---
- hosts: azure_vms
  become: true
  vars:
    acr_server: "casopractico2lgc2acr.azurecr.io"
    acr_username: "{{ ansible_env['ACR_ADMIN_USERNAME'] }}" 
    acr_password: "{{ ansible_env['ACR_ADMIN_PASSWORD'] }}" 
    container_image: "casopractico2lgc2acr.azurecr.io/webapp-lgc:casopractico2"
    image_name: "webapp-lgc"
    user_folder: "/home/leo_gomez"

  tasks:
    - name: Ensure Python is installed
      raw: sudo apt-get update && sudo apt-get install -y python3

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Ensure necessary packages are installed (Ubuntu)
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - software-properties-common  # Necesario para agregar repositorios en Ubuntu
        - curl
      when: ansible_os_family == 'Debian'

    - name: Add Podman repository (Ubuntu)
      apt_repository:
        repo: ppa:projectatomic/ppa
        state: present
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '18.04'

    - name: Update apt cache after adding PPA (Ubuntu)
      apt:
        update_cache: yes
      when: ansible_distribution == 'Ubuntu'

    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - podman
        - apache2-utils

    - name: Login to ACR
      ansible.builtin.command: >
        podman login "{{ acr_server }}" 
        --username "{{ acr_username }}"
        --password "{{ acr_password }}"

    - name: Copy Dockerfile to the VM
      copy:
        src: webserver/Dockerfile
        dest: "{{ user_folder }}/Dockerfile"

    - name: Copy nginx.conf to the VM
      copy:
        src: webserver/nginx.conf
        dest: "{{ user_folder }}/nginx.conf"

    - name: Copy entrypoint.sh to the VM
      copy:
        src: webserver/entrypoint.sh
        dest: "{{ user_folder }}/entrypoint.sh"

    - name: Copy index.html to the VM
      copy:
        src: webserver/index.html
        dest: "{{ user_folder }}/index.html"

    - name: Ensure /etc/containers directory exists
      file:
        path: /etc/containers
        state: directory
        mode: '0755'

    - name: Create and configure registries.conf
      copy:
        dest: /etc/containers/registries.conf
        content: |
          [registries.search]
          registries = ['docker.io']
          
    - name: Build Podman image
      command: >
        podman build -t "{{ container_image }}" .
      args:
        chdir: "{{ user_folder }}"

    - name: Push Podman image to ACR
      command: >
        podman push "{{ container_image }}"

    - name: Run web application container
      command: >
        podman run -d -p 443:443 
        -v "{{ user_folder }}/certs:/etc/nginx/certs"
        -e USER="{{ acr_username }}" -e PASSWORD="{{ acr_password }}" "{{ container_image }}"

    - name: Setup container as a systemd service
      copy:
        dest: /etc/systemd/system/webapp.service
        content: |
          [Unit]
          Description=Web Application Container
          After=network.target

          [Service]
          ExecStart=/usr/bin/podman start -a {{ image_name }}
          ExecStop=/usr/bin/podman stop -t 2 {{ image_name }}
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start the web application service
      systemd:
        name: webapp
        enabled: true
        state: started
